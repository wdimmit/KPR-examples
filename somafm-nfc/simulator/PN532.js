//@module/*  Copyright 2011-2016 Marvell Semiconductor, Inc.  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.*/

/* UI */var RADIO_UNSELECTED = 2;var RADIO_SELECTED = 3;var labeledButtonStyle = new Style({ color: ['gray', 'gray', '#88a4ee'], font: 'bold 20px', horizontal: 'left' });
var ButtonBehavior = Behavior.template({	onCreate: function(container, data) {		this.data = data;		container.state = container.active ? 1 : 0;	},	onTouchBegan: function(container, id, x, y, ticks) { 		this.changeState(container, 2);	},	onTouchCancelled: function(container, id, x, y, ticks) { 		this.changeState(container, 1);	},	onTouchEnded: function(container, id, x, y, ticks) {		this.changeState(container, 1);		container.delegate("onTap"); 	},	changeState: function(container, state) {		container.state = state;		if (false == ("length" in container))			debugger		if (container.length > 0) {			var content = container.first;			while (content) {				content.state = state;				content = content.next;			}		} 	},	onTap: function(container) {		var data = this.data;		if (data && ("action" in data))			container.invoke(new Message(data.action));	}});

var glyphTexture = (screenScale == 2) ? new Texture('./assets/core-glyph-strip-60px.png', 2) : (screenScale == 1.5) ? new Texture('./assets/core-glyph-strip-60px.png', 2) : new Texture('./assets/core-glyph-strip-60px.png', 2);
var disabledEffect = new Effect();disabledEffect.colorize('#9d9d9d', 1);var enabledEffect = new Effect();enabledEffect.colorize('gray', 1);var selectedEffect = new Effect();selectedEffect.colorize('#88a4ee', 1);

var DynamicSkin = function(texture, disabledEffect, enabledEffect, selectedEffect, variantWidth, tiles, margins, aspect) {	var saveEffect = texture.effect;	var srcScale = texture.scale;	var srcWidth = texture.width;	var srcHeight = texture.height;	var dstScale = screenScale;	var dstWidth = Math.round(srcWidth / dstScale);	var dstHeight = Math.round(srcHeight / dstScale);	var port = new Port({width: dstWidth, height: dstHeight * 3});	port.behavior = {		onDraw: function(port) {			port.effect = disabledEffect;			port.drawImage(texture, 0, 0, dstWidth, dstHeight, 0, 0, srcWidth, srcHeight);			port.effect = enabledEffect;			port.drawImage(texture, 0, dstHeight, dstWidth, dstHeight, 0, 0, srcWidth, srcHeight);			port.effect = selectedEffect;			port.drawImage(texture, 0, dstHeight << 1, dstWidth, dstHeight, 0, 0, srcWidth, srcHeight);		}	}	var result = new Texture(port, srcScale);	var height = Math.round(srcHeight / srcScale);	var width = (variantWidth == undefined) ? height : Math.round(variantWidth / scale);	Skin.call(this, result, {x:0, y:0, width:height, height:height}, width, height, tiles, margins, aspect);	result.effect = saveEffect;};DynamicSkin.prototype = Skin.prototype;

var glyphSkin = new DynamicSkin(glyphTexture, disabledEffect, enabledEffect, selectedEffect);var PinsSimulators = require ("PinsSimulators");var TOKENS = [      {uid: [0,0,0,0], pages: []},    {uid: [80,237,85,11], pages: []},    {uid: [2,0,0,0], pages: []},    {uid: [3,0,0,0], pages: []},    {uid: [4,0,0,0], pages: []},    {uid: [192,206,56,22], pages: []},    {uid: [96,95,35,17], pages: []},    {uid: [112,205,28,1], pages: []},    {uid: [8,0,0,0], pages: []},    {uid: [9,0,0,0], pages: []},    {uid: [224,25,25,1], pages: []},    {uid: [11,0,0,0], pages: []},    {uid: [12,0,0,0], pages: []},    {uid: [13,0,0,0], pages: []},    {uid: [14,0,0,0], pages: []},    {uid: [15,0,0,0], pages: []},];

/* BLL interface */
exports.pins = {    data: {type: "I2C", address: 0x24}}exports.configure = function(configuration) {    this.data = {        id: 'PN532',        behavior: NFCBehavior,        header : {             label : this.id,             name : "PN532",            iconVariant : PinsSimulators.SENSOR_KNOB         },        value: -1,        last: undefined,        authorized: false    };    this.container = shell.delegate("addSimulatorPart", this.data);}exports.close = function() {    shell.delegate("removeSimulatorPart", this.container);}exports.poll = function() {    var data = this.data;    if (data.last == data.value) return;    data.last = data.value;    return (-1 === data.value) ? [] : data.value;}exports.mifare_CmdAuthA = function(params) {    if (6 != params.key.length)        return -1;    for (var i = 0; i < 6; i++)        if (0xff != params.key[i])            return -1;    if (!equalArrays(params.token, this.data.token.uid))        return -1;    this.data.authorized = true;    return 0;}exports.mifare_CmdRead = function(params) {    if (false == this.data.authorized)        return -1;    if ((params.page < 0) || (params.page > 63))        return -1;    var page = this.data.token.pages[params.page];    if (undefined == page)        this.data.token.pages[params.page] = page = [];        for (var i = page.length; i < 16; i++)        page[i] = 0;    return page;}exports.mifare_CmdWrite = function(params) {    if (false == this.data.authorized)        return -1;    if (false == this.data.authorized)        return -1;    if ((params.page < 0) || (params.page > 63) || (params.data.length > 16))        return -1;        var page = params.data;    for (var i = page.length; i < 16; i++)        page[i] = 0;    this.data.token.pages[params.page] = page;        return 0;}

/* Parts simulator */var NFCBehavior = function(column, data) {    Behavior.call(this, column, data);}NFCBehavior.prototype = Object.create(Behavior.prototype, {    onCreate: { value: function(column, data) {        var list = new TokensList(data);        for (var i = 0; i < TOKENS.length; i++)            list.add(new NFCTokenButton({data: data, string: JSON.stringify(TOKENS[i].uid), value: TOKENS[i].uid}));        column.partContentsContainer.add(list);        column.distribute("onChanged");    }},});
var NFCTokenButton = Line.template(function($) { return {    height:30, left: 30, active:true,    behavior: Object.create(ButtonBehavior.prototype, {        onCreate: { value: function(container, $) {            ButtonBehavior.prototype.onCreate.call(this, container, $.data);            this.value = $.value;        }},        onChanged: { value: function(container) {            container.first.variant = (this.data.value == this.value) ? RADIO_SELECTED : RADIO_UNSELECTED        }},        onTap: { value: function(container) {            this.data.value = this.value;            this.data.token = findToken(this.value);            this.data.authorized = false;            container.container.distribute("onChanged");        }},    }),    contents: [        Content($, { skin: glyphSkin }),        Label($, { style: labeledButtonStyle, string:$.string }),    ]}});var TokensList = Column.template(function($) { return {    left:0, right:0,    contents: [        Label($, { left:0, right:0, top:0, height:30, style: labeledButtonStyle, string:"NFC Tokens" }),        NFCTokenButton({ data:$, string:"[ ] (no token)", value: -1 }, {  })    ],}});

/* Local functions */function findToken(token) {    for (var i = 0; i < TOKENS.length; i++)        if (equalArrays(token, TOKENS[i].uid))            return TOKENS[i];    return null;}function equalArrays(a, b) {    if (!Array.isArray(a) || !Array.isArray(b))        return false;    if (a.length != b.length)        return false;    for (var i = 0; i < a.length; i++)        if (a[i] != b[i])            return false;    return true;}