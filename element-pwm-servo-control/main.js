/*  Copyright 2011-2016 Marvell Semiconductor, Inc.  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.*/import Pins from 'pins';var main = {	onLaunch(){			// Calibrate servo and control ranges for best results		var srv= {			min: 0.58, // pulse width range			max: 2.53, // for HiTec HS-311			get range() {				return Math.round( ( this.max - this.min ) *10000 ) / 10000			}		};		var ctl = { 			min: 0.23, // analog value range for a			max: 0.72, // Sharp GP2Y0A21 distance sensor			threshold: 0.015, // noise floor			get range() {				return Math.round( ( this.max - this.min ) *10000 ) / 10000			}		};						Pins.configure({			servoPin: { pin: 9 , type: "PWM" },			ctlPin: { pin: 3, type: "Analog" },			// Add power and ground as necessary			servoPWR: { pin: 10, type: "Power" },			servoGND: { pin: 11, type: "Ground"},			ctlPWR: { pin: 1, type: "Power" },			ctlGND: { pin: 2, type: "Ground"}		}, success => {			if (success) {				var lastResult = 0;				var interval = 64;				var period = 20;				Pins.repeat( "/ctlPin/read", interval, result => {					result = clamp( result, ctl.min, ctl.max )					let fraction = ( result - ctl.min ) / ctl.range 					// Use trace to determine ctlPin's min and max values					// Then comment out trace for better responsiveness					trace( "result: " + result.toFixed(6) + ", fraction: " + fraction.toFixed(3) + "\n" );					let delta = Math.abs( lastResult - result );					if( delta > ctl.threshold ) {						let width = fraction * srv.range + srv.min;						Pins.invoke( "/servoPin/write", [ width, period ] )						lastResult = result;					}				})			} else {				trace("Failed to configure pins.\n");			}		});	},};function clamp(result, min, max) {	return result < min ? min : result > max ? max : result;}export default main;