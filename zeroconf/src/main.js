/* *     Copyright (C) 2010-2016 Marvell International Ltd. *     Copyright (C) 2002-2010 Kinoma, Inc. * *     Licensed under the Apache License, Version 2.0 (the "License"); *     you may not use this file except in compliance with the License. *     You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * *     Unless required by applicable law or agreed to in writing, software *     distributed under the License is distributed on an "AS IS" BASIS, *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *     See the License for the specific language governing permissions and *     limitations under the License. */
import THEME from 'mobile/theme';import CONTROL from 'mobile/control';import DIALOG from 'mobile/dialog';import MODEL from 'mobile/model';import SCROLLER from 'mobile/scroller';
import TOOL from 'mobile/tool';/* Skins and styles */var blackSkin = new Skin({ fill: 'black' });var whiteSkin = new Skin({ fill: 'white' });var headerSkin = new Skin({ fill: '#203a6f' });var headerStyle = new Style({ color: 'white', font: 'bold 24px Arial', horizontal: 'left' });var rightStyle = new Style({ color: 'white', font: '24px Arial', horizontal: 'right' });var nameStyle = new Style({ color: 'white', font: 'bold 24px Arial', horizontal: 'left', top: 5, });var hostStyle = new Style({ color: 'white', font: '18px Arial', horizontal: 'left' });var errorStyle = new Style({ color: 'white', font: '18px Arial', horizontal: 'center', vertical: 'middle', });var backTexture = new Texture('./assets/back.png', 1);var backSkin = new CONTROL.DynamicSkin(backTexture, THEME.tabDisabledEffect, THEME.tabEnabledEffect, THEME.tabSelectedEffect);/* Handlers */Handler.bind("/browse", Behavior({	onComplete: function(line, message) {		var type = message.getResponseHeader("Content-Type");		if (!type)			return;		else if (type.indexOf("image/") == 0)			application.replace(application.first, new ImageScreen(this.data));		else if (type.indexOf("text/") == 0)			application.replace(application.first, new TextScreen(this.data));		else			application.replace(application.first, new ErrorScreen(this.data));	},	onInvoke: function(handler, message) {		var data = parseQuery(message.query);		var url = "http://" + data.ip + ":" + data.port;		this.data = data;		var message = new Message(url);		message.method = "HEAD";		handler.invoke(message, Message.TEXT);	}}));Handler.bind("/", Behavior({	onInvoke: function(handler, message) {		var uri = mergeURI(application.url, "assets/kinoma-create-face-right.jpg");		if (Files.exists(uri)) {            message.status = 200;			message.setResponseHeader("Content-Type", "image/jpeg");			message.responseChunk = Files.readChunk(uri);        	message.setResponseHeader("Content-Length", message.responseChunk.length);        }	}}));Handler.bind("/select", Behavior({	onInvoke: function(handler, message) {		var query = parseQuery(message.query);		if ("type" in query) {			data.servers = [];			model.browser.stop();			model.browser = new Zeroconf.Browser(query.type);			model.browser.behavior = model;			model.browser.start();			application.distribute("onServersChanged");		}	}}));/* UI templates */var ServersScroller = SCROLLER.VerticalScroller.template($ => ({ left: 0, right: 0, top: 40, bottom: 0, 	contents: [		Column($, { left: 0, right: 0, top: 0, 			contents: [				($.servers) ? $.servers.map($ => { 					var $$ = this; 					return [						Line($, { left: 0, right: 0, active: true, 							Behavior: class extends CONTROL.ButtonBehavior {								onTap(line) {									application.invoke(new Message("/browse?" + serializeQuery(this.data)));								}							}, 							contents: [								Column($, { left: 0, right: 0, top: 0, 									contents: [										Label($, { left: 10, right: 10, style: nameStyle, string: $.name, }),										Label($, { left: 10, right: 10, style: hostStyle, string: $.ip + ':' + $.port, }),									], 								}),							], 						}),						Container($, { left: 0, right: 0, top: 0, height: 1, skin: headerSkin, }),					]				}, $) : null, 			], 		}),	], }));var ZeroconfMenuButton = TOOL.MenuButton.template($ => ({ left: 0, top: 5 }));var BrowserScreen = Container.template($ => ({ left: 0, right: 0, top: 0, bottom: 0, skin: blackSkin, 	Behavior: class extends Behavior {		onServersChanged(layout) {			if (this.data.servers.length == 0)				layout.replace(layout.first, new DIALOG.Spinner);			else				layout.replace(layout.first, new ServersScroller(this.data));		}		onCreate(layout, data) {			this.data = data;		}	},	contents: [		DIALOG.Spinner($, { }),		Line($, { left: 0, right: 0, top: 0, height: 40, skin: headerSkin, 			Behavior: class extends Behavior {				onCreate(layout, data) {					var menuButton = new ZeroconfMenuButton(menuData);					menuButton.style = headerStyle;					layout.add(menuButton);				}			}		}),	], }));
var BrowserLine = Container.template($ => ({ left: 0, right: 0, top: 0, height: 40, skin: headerSkin, 	contents: [		Container($, { 			left: 0, width: 40, top: 0, height: 40, active: true, 			Behavior: class extends CONTROL.ButtonBehavior {				onTap(container) {					application.replace(application.first, new BrowserScreen(data));					application.distribute("onServersChanged");				}			}, 			contents: [ Content($, { left: 0, right: 0, top: 0, bottom: 0, skin: backSkin, }) ], 		}),		Label($, { left: 40, right: 10, top: 0, height: 40, style: headerStyle, string: $.name, }),	], }));var ImageScreen = Container.template($ => ({ left: 0, right: 0, top: 0, bottom: 0, skin: blackSkin, 	Behavior: class extends Behavior {		onCreate(layout, data) {
			trace('test\n');			this.data = data;			data.IMAGE.url = "http://" + data.ip + ":" + data.port;		}	}, 	contents: [		Container($, { left: 0, right: 0, top: 40, bottom: 0, skin: whiteSkin, 			contents: [ Picture($, { left: 10, right: 10, top: 10, bottom: 10, anchor: 'IMAGE', }) ] 		}),		BrowserLine($, { }),	], }));var TextScreen = Container.template($ => ({ left: 0, right: 0, top: 0, bottom: 0, skin: blackSkin, 	Behavior: class extends Behavior {		onComplete(layout, message) {			this.data.TEXT.string = message.responseText;		}		onCreate(layout, data) {			this.data = data;			var message = new Message("http://" + data.ip + ":" + data.port);			layout.invoke(message, Message.TEXT);		}	}, 	contents: [		SCROLLER.VerticalScroller($, { left: 0, right: 0, top: 40, bottom: 0, 			contents: [ Text($, { left: 10, right: 10, style: hostStyle, anchor: 'TEXT', }) ] 		}),		BrowserLine($, { }),	], }));var ErrorScreen = Container.template($ => ({ left: 0, right: 0, top: 0, bottom: 0, skin: blackSkin, 	contents: [		Label($, { left: 10, right: 10, top: 40, bottom: 0, style: errorStyle, string: data.error, }),		BrowserLine($, { }),	], }));var UnsupportedScreen = Container.template($ => ({ left: 0, right: 0, top: 0, bottom: 0, skin: blackSkin, 	contents: [ Text($, { left: 0, right: 0, style: errorStyle, string: 'This example is not currently supported on Windows.' }) ] }));/* Application set-up */var data = {	error: "Cannot display this page!",	servers: [],	state: true};var menuData = {	action: "/select?type=",	items: [		{ title: "HTTP Servers", value: "_http._tcp." },		{ title: "Airport Base Stations", value: "_airport._tcp." },		{ title: "Home Sharing", value: "_home-sharing._tcp." },		{ title: "Samba", value: "_smb._tcp." },		{ title: "Workstation Manager", value: "_workstation._tcp." },		{ title: "All", value: "" }	],	selection: 0};class ApplicationBehavior extends MODEL.ApplicationBehavior {	onLaunch(application) {		if ("win" != system.platform)			application.add(new BrowserScreen(data));		else			application.add(new UnsupportedScreen);		application.shared = true;		this.servers = [];		this.browser = new Zeroconf.Browser("_http._tcp.");		this.browser.behavior = this;		this.browser.start();		this.advertisement = new Zeroconf.Advertisement("_http._tcp.", "Sample Server", application.serverPort);		this.advertisement.behavior = this;		this.advertisement.start();		super.onLaunch(application);	}	onQuit(application) {		this.advertisement.stop();		this.advertisement = undefined;		this.browser.stop();		this.browser = undefined;		application.shared = false;		super.onQuit(application);	}	onZeroconfServiceCompare(a,b) {		return a.name.toLowerCase().compare(b.name.toLowerCase());	}	onZeroconfServiceDown(service) {		trace("onZeroconfServiceDown: " + JSON.stringify(service) + "\n");		var servers = data.servers;		for (var i = servers.length; i--;) {			if ((servers[i].name == service.name) && servers[i].type == service.type){				servers.splice(i, 1);				application.distribute("onServersChanged");				break;			}		}	}	onZeroconfServiceRegistered(service) {		trace("onZeroconfServiceRegistered: " + service.serviceName + "\n");	}	onZeroconfServiceUnregistered(service) {		trace("onZeroconfServiceUnregistered: " + service.serviceName + "\n");	}	onZeroconfServiceUp(service) {		trace("onZeroconfServiceUp: " + JSON.stringify(service) + "\n");		var servers = data.servers;		for (var i = servers.length; i--;) {			if ((servers[i].name == service.name) && servers[i].type == service.type){				servers.splice(i, 1);				break;			}		}		data.servers.push(service);		data.servers.sort(this.onZeroconfServiceCompare);		application.distribute("onServersChanged");	}}var model = application.behavior = new ApplicationBehavior(application);